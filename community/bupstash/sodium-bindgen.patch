diff --git a/src/sodium_bindings_gen.rs b/src/sodium_bindings_gen.rs
index 2015ac7..e181c48 100644
--- a/src/sodium_bindings_gen.rs
+++ b/src/sodium_bindings_gen.rs
@@ -1,4 +1,4 @@
-/* automatically generated by rust-bindgen */
+/* automatically generated by rust-bindgen 0.71.1 */
 
 pub const crypto_aead_aes256gcm_KEYBYTES: u32 = 32;
 pub const crypto_aead_aes256gcm_NSECBYTES: u32 = 0;
@@ -31,7 +31,7 @@ pub const crypto_auth_hmacsha512256_BYTES: u32 = 32;
 pub const crypto_auth_hmacsha512256_KEYBYTES: u32 = 32;
 pub const crypto_auth_BYTES: u32 = 32;
 pub const crypto_auth_KEYBYTES: u32 = 32;
-pub const crypto_auth_PRIMITIVE: &'static [u8; 14usize] = b"hmacsha512256\0";
+pub const crypto_auth_PRIMITIVE: &[u8; 14] = b"hmacsha512256\0";
 pub const crypto_hash_sha256_BYTES: u32 = 32;
 pub const crypto_auth_hmacsha256_BYTES: u32 = 32;
 pub const crypto_auth_hmacsha256_KEYBYTES: u32 = 32;
@@ -50,7 +50,7 @@ pub const crypto_box_PUBLICKEYBYTES: u32 = 32;
 pub const crypto_box_SECRETKEYBYTES: u32 = 32;
 pub const crypto_box_NONCEBYTES: u32 = 24;
 pub const crypto_box_MACBYTES: u32 = 16;
-pub const crypto_box_PRIMITIVE: &'static [u8; 27usize] = b"curve25519xsalsa20poly1305\0";
+pub const crypto_box_PRIMITIVE: &[u8; 27] = b"curve25519xsalsa20poly1305\0";
 pub const crypto_box_BEFORENMBYTES: u32 = 32;
 pub const crypto_box_SEALBYTES: u32 = 48;
 pub const crypto_box_ZEROBYTES: u32 = 32;
@@ -89,9 +89,9 @@ pub const crypto_generichash_BYTES: u32 = 32;
 pub const crypto_generichash_KEYBYTES_MIN: u32 = 16;
 pub const crypto_generichash_KEYBYTES_MAX: u32 = 64;
 pub const crypto_generichash_KEYBYTES: u32 = 32;
-pub const crypto_generichash_PRIMITIVE: &'static [u8; 8usize] = b"blake2b\0";
+pub const crypto_generichash_PRIMITIVE: &[u8; 8] = b"blake2b\0";
 pub const crypto_hash_BYTES: u32 = 64;
-pub const crypto_hash_PRIMITIVE: &'static [u8; 7usize] = b"sha512\0";
+pub const crypto_hash_PRIMITIVE: &[u8; 7] = b"sha512\0";
 pub const crypto_kdf_blake2b_BYTES_MIN: u32 = 16;
 pub const crypto_kdf_blake2b_BYTES_MAX: u32 = 64;
 pub const crypto_kdf_blake2b_CONTEXTBYTES: u32 = 8;
@@ -100,24 +100,24 @@ pub const crypto_kdf_BYTES_MIN: u32 = 16;
 pub const crypto_kdf_BYTES_MAX: u32 = 64;
 pub const crypto_kdf_CONTEXTBYTES: u32 = 8;
 pub const crypto_kdf_KEYBYTES: u32 = 32;
-pub const crypto_kdf_PRIMITIVE: &'static [u8; 8usize] = b"blake2b\0";
+pub const crypto_kdf_PRIMITIVE: &[u8; 8] = b"blake2b\0";
 pub const crypto_kx_PUBLICKEYBYTES: u32 = 32;
 pub const crypto_kx_SECRETKEYBYTES: u32 = 32;
 pub const crypto_kx_SEEDBYTES: u32 = 32;
 pub const crypto_kx_SESSIONKEYBYTES: u32 = 32;
-pub const crypto_kx_PRIMITIVE: &'static [u8; 14usize] = b"x25519blake2b\0";
+pub const crypto_kx_PRIMITIVE: &[u8; 14] = b"x25519blake2b\0";
 pub const crypto_onetimeauth_poly1305_BYTES: u32 = 16;
 pub const crypto_onetimeauth_poly1305_KEYBYTES: u32 = 32;
 pub const crypto_onetimeauth_BYTES: u32 = 16;
 pub const crypto_onetimeauth_KEYBYTES: u32 = 32;
-pub const crypto_onetimeauth_PRIMITIVE: &'static [u8; 9usize] = b"poly1305\0";
+pub const crypto_onetimeauth_PRIMITIVE: &[u8; 9] = b"poly1305\0";
 pub const crypto_pwhash_argon2i_ALG_ARGON2I13: u32 = 1;
 pub const crypto_pwhash_argon2i_BYTES_MIN: u32 = 16;
 pub const crypto_pwhash_argon2i_PASSWD_MIN: u32 = 0;
 pub const crypto_pwhash_argon2i_PASSWD_MAX: u32 = 4294967295;
 pub const crypto_pwhash_argon2i_SALTBYTES: u32 = 16;
 pub const crypto_pwhash_argon2i_STRBYTES: u32 = 128;
-pub const crypto_pwhash_argon2i_STRPREFIX: &'static [u8; 10usize] = b"$argon2i$\0";
+pub const crypto_pwhash_argon2i_STRPREFIX: &[u8; 10] = b"$argon2i$\0";
 pub const crypto_pwhash_argon2i_OPSLIMIT_MIN: u32 = 3;
 pub const crypto_pwhash_argon2i_OPSLIMIT_MAX: u32 = 4294967295;
 pub const crypto_pwhash_argon2i_MEMLIMIT_MIN: u32 = 8192;
@@ -133,7 +133,7 @@ pub const crypto_pwhash_argon2id_PASSWD_MIN: u32 = 0;
 pub const crypto_pwhash_argon2id_PASSWD_MAX: u32 = 4294967295;
 pub const crypto_pwhash_argon2id_SALTBYTES: u32 = 16;
 pub const crypto_pwhash_argon2id_STRBYTES: u32 = 128;
-pub const crypto_pwhash_argon2id_STRPREFIX: &'static [u8; 11usize] = b"$argon2id$\0";
+pub const crypto_pwhash_argon2id_STRPREFIX: &[u8; 11] = b"$argon2id$\0";
 pub const crypto_pwhash_argon2id_OPSLIMIT_MIN: u32 = 1;
 pub const crypto_pwhash_argon2id_OPSLIMIT_MAX: u32 = 4294967295;
 pub const crypto_pwhash_argon2id_MEMLIMIT_MIN: u32 = 8192;
@@ -151,7 +151,7 @@ pub const crypto_pwhash_PASSWD_MIN: u32 = 0;
 pub const crypto_pwhash_PASSWD_MAX: u32 = 4294967295;
 pub const crypto_pwhash_SALTBYTES: u32 = 16;
 pub const crypto_pwhash_STRBYTES: u32 = 128;
-pub const crypto_pwhash_STRPREFIX: &'static [u8; 11usize] = b"$argon2id$\0";
+pub const crypto_pwhash_STRPREFIX: &[u8; 11] = b"$argon2id$\0";
 pub const crypto_pwhash_OPSLIMIT_MIN: u32 = 1;
 pub const crypto_pwhash_OPSLIMIT_MAX: u32 = 4294967295;
 pub const crypto_pwhash_MEMLIMIT_MIN: u32 = 8192;
@@ -161,12 +161,12 @@ pub const crypto_pwhash_OPSLIMIT_MODERATE: u32 = 3;
 pub const crypto_pwhash_MEMLIMIT_MODERATE: u32 = 268435456;
 pub const crypto_pwhash_OPSLIMIT_SENSITIVE: u32 = 4;
 pub const crypto_pwhash_MEMLIMIT_SENSITIVE: u32 = 1073741824;
-pub const crypto_pwhash_PRIMITIVE: &'static [u8; 8usize] = b"argon2i\0";
+pub const crypto_pwhash_PRIMITIVE: &[u8; 8] = b"argon2i\0";
 pub const crypto_scalarmult_curve25519_BYTES: u32 = 32;
 pub const crypto_scalarmult_curve25519_SCALARBYTES: u32 = 32;
 pub const crypto_scalarmult_BYTES: u32 = 32;
 pub const crypto_scalarmult_SCALARBYTES: u32 = 32;
-pub const crypto_scalarmult_PRIMITIVE: &'static [u8; 11usize] = b"curve25519\0";
+pub const crypto_scalarmult_PRIMITIVE: &[u8; 11] = b"curve25519\0";
 pub const crypto_secretbox_xsalsa20poly1305_KEYBYTES: u32 = 32;
 pub const crypto_secretbox_xsalsa20poly1305_NONCEBYTES: u32 = 24;
 pub const crypto_secretbox_xsalsa20poly1305_MACBYTES: u32 = 16;
@@ -175,7 +175,7 @@ pub const crypto_secretbox_xsalsa20poly1305_ZEROBYTES: u32 = 32;
 pub const crypto_secretbox_KEYBYTES: u32 = 32;
 pub const crypto_secretbox_NONCEBYTES: u32 = 24;
 pub const crypto_secretbox_MACBYTES: u32 = 16;
-pub const crypto_secretbox_PRIMITIVE: &'static [u8; 17usize] = b"xsalsa20poly1305\0";
+pub const crypto_secretbox_PRIMITIVE: &[u8; 17] = b"xsalsa20poly1305\0";
 pub const crypto_secretbox_ZEROBYTES: u32 = 32;
 pub const crypto_secretbox_BOXZEROBYTES: u32 = 16;
 pub const crypto_stream_chacha20_KEYBYTES: u32 = 32;
@@ -197,7 +197,7 @@ pub const crypto_shorthash_siphashx24_BYTES: u32 = 16;
 pub const crypto_shorthash_siphashx24_KEYBYTES: u32 = 16;
 pub const crypto_shorthash_BYTES: u32 = 8;
 pub const crypto_shorthash_KEYBYTES: u32 = 16;
-pub const crypto_shorthash_PRIMITIVE: &'static [u8; 10usize] = b"siphash24\0";
+pub const crypto_shorthash_PRIMITIVE: &[u8; 10] = b"siphash24\0";
 pub const crypto_sign_ed25519_BYTES: u32 = 64;
 pub const crypto_sign_ed25519_SEEDBYTES: u32 = 32;
 pub const crypto_sign_ed25519_PUBLICKEYBYTES: u32 = 32;
@@ -206,10 +206,10 @@ pub const crypto_sign_BYTES: u32 = 64;
 pub const crypto_sign_SEEDBYTES: u32 = 32;
 pub const crypto_sign_PUBLICKEYBYTES: u32 = 32;
 pub const crypto_sign_SECRETKEYBYTES: u32 = 64;
-pub const crypto_sign_PRIMITIVE: &'static [u8; 8usize] = b"ed25519\0";
+pub const crypto_sign_PRIMITIVE: &[u8; 8] = b"ed25519\0";
 pub const crypto_stream_KEYBYTES: u32 = 32;
 pub const crypto_stream_NONCEBYTES: u32 = 24;
-pub const crypto_stream_PRIMITIVE: &'static [u8; 9usize] = b"xsalsa20\0";
+pub const crypto_stream_PRIMITIVE: &[u8; 9] = b"xsalsa20\0";
 pub const crypto_stream_salsa20_KEYBYTES: u32 = 32;
 pub const crypto_stream_salsa20_NONCEBYTES: u32 = 8;
 pub const crypto_verify_16_BYTES: u32 = 16;
@@ -248,7 +248,7 @@ pub const crypto_pwhash_scryptsalsa208sha256_BYTES_MIN: u32 = 16;
 pub const crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN: u32 = 0;
 pub const crypto_pwhash_scryptsalsa208sha256_SALTBYTES: u32 = 32;
 pub const crypto_pwhash_scryptsalsa208sha256_STRBYTES: u32 = 102;
-pub const crypto_pwhash_scryptsalsa208sha256_STRPREFIX: &'static [u8; 4usize] = b"$7$\0";
+pub const crypto_pwhash_scryptsalsa208sha256_STRPREFIX: &[u8; 4] = b"$7$\0";
 pub const crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN: u32 = 32768;
 pub const crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX: u32 = 4294967295;
 pub const crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN: u32 = 16777216;
@@ -260,86 +260,76 @@ pub const crypto_stream_salsa2012_KEYBYTES: u32 = 32;
 pub const crypto_stream_salsa2012_NONCEBYTES: u32 = 8;
 pub const crypto_stream_salsa208_KEYBYTES: u32 = 32;
 pub const crypto_stream_salsa208_NONCEBYTES: u32 = 8;
-pub type __uint8_t = ::std::os::raw::c_uchar;
-pub type __uint32_t = ::std::os::raw::c_uint;
-pub type __uint64_t = ::std::os::raw::c_ulong;
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_version_string() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_library_version_major() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_library_version_minor() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_library_minimal() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_init() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_set_misuse_handler(
         handler: ::std::option::Option<unsafe extern "C" fn()>,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
-    pub fn sodium_misuse();
+unsafe extern "C" {
+    pub fn sodium_misuse() -> !;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_is_available() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_nsecbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_npubbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_abytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_messagebytes_max() -> usize;
 }
 #[repr(C)]
 #[repr(align(16))]
-#[derive(Copy, Clone)]
+#[derive(Debug, Copy, Clone)]
 pub struct crypto_aead_aes256gcm_state_ {
     pub opaque: [::std::os::raw::c_uchar; 512usize],
 }
-#[test]
-fn bindgen_test_layout_crypto_aead_aes256gcm_state_() {
-    assert_eq!(
-        ::std::mem::size_of::<crypto_aead_aes256gcm_state_>(),
-        512usize,
-        concat!("Size of: ", stringify!(crypto_aead_aes256gcm_state_))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<crypto_aead_aes256gcm_state_>(),
-        16usize,
-        concat!("Alignment of ", stringify!(crypto_aead_aes256gcm_state_))
-    );
-    assert_eq!(
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of crypto_aead_aes256gcm_state_"]
+        [::std::mem::size_of::<crypto_aead_aes256gcm_state_>() - 512usize];
+    ["Alignment of crypto_aead_aes256gcm_state_"]
+        [::std::mem::align_of::<crypto_aead_aes256gcm_state_>() - 16usize];
+    ["Offset of field: crypto_aead_aes256gcm_state_::opaque"]
+        [::std::mem::offset_of!(crypto_aead_aes256gcm_state_, opaque) - 0usize];
+};
+impl Default for crypto_aead_aes256gcm_state_ {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
         unsafe {
-            &(*(::std::ptr::null::<crypto_aead_aes256gcm_state_>())).opaque as *const _ as usize
-        },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_aead_aes256gcm_state_),
-            "::",
-            stringify!(opaque)
-        )
-    );
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
 }
 pub type crypto_aead_aes256gcm_state = crypto_aead_aes256gcm_state_;
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_encrypt(
         c: *mut ::std::os::raw::c_uchar,
         clen_p: *mut ::std::os::raw::c_ulonglong,
@@ -352,7 +342,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_decrypt(
         m: *mut ::std::os::raw::c_uchar,
         mlen_p: *mut ::std::os::raw::c_ulonglong,
@@ -365,7 +355,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_encrypt_detached(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -379,7 +369,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_decrypt_detached(
         m: *mut ::std::os::raw::c_uchar,
         nsec: *mut ::std::os::raw::c_uchar,
@@ -392,13 +382,13 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_beforenm(
         ctx_: *mut crypto_aead_aes256gcm_state,
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_encrypt_afternm(
         c: *mut ::std::os::raw::c_uchar,
         clen_p: *mut ::std::os::raw::c_ulonglong,
@@ -411,7 +401,7 @@ extern "C" {
         ctx_: *const crypto_aead_aes256gcm_state,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_decrypt_afternm(
         m: *mut ::std::os::raw::c_uchar,
         mlen_p: *mut ::std::os::raw::c_ulonglong,
@@ -424,7 +414,7 @@ extern "C" {
         ctx_: *const crypto_aead_aes256gcm_state,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_encrypt_detached_afternm(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -438,7 +428,7 @@ extern "C" {
         ctx_: *const crypto_aead_aes256gcm_state,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_decrypt_detached_afternm(
         m: *mut ::std::os::raw::c_uchar,
         nsec: *mut ::std::os::raw::c_uchar,
@@ -451,25 +441,25 @@ extern "C" {
         ctx_: *const crypto_aead_aes256gcm_state,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_aes256gcm_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_nsecbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_npubbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_abytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_encrypt(
         c: *mut ::std::os::raw::c_uchar,
         clen_p: *mut ::std::os::raw::c_ulonglong,
@@ -482,7 +472,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_decrypt(
         m: *mut ::std::os::raw::c_uchar,
         mlen_p: *mut ::std::os::raw::c_ulonglong,
@@ -495,7 +485,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_encrypt_detached(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -509,7 +499,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_decrypt_detached(
         m: *mut ::std::os::raw::c_uchar,
         nsec: *mut ::std::os::raw::c_uchar,
@@ -522,25 +512,25 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_ietf_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_nsecbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_npubbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_abytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_encrypt(
         c: *mut ::std::os::raw::c_uchar,
         clen_p: *mut ::std::os::raw::c_ulonglong,
@@ -553,7 +543,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_decrypt(
         m: *mut ::std::os::raw::c_uchar,
         mlen_p: *mut ::std::os::raw::c_ulonglong,
@@ -566,7 +556,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_encrypt_detached(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -580,7 +570,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_decrypt_detached(
         m: *mut ::std::os::raw::c_uchar,
         nsec: *mut ::std::os::raw::c_uchar,
@@ -593,25 +583,25 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_chacha20poly1305_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_nsecbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_npubbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_abytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_encrypt(
         c: *mut ::std::os::raw::c_uchar,
         clen_p: *mut ::std::os::raw::c_ulonglong,
@@ -624,7 +614,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_decrypt(
         m: *mut ::std::os::raw::c_uchar,
         mlen_p: *mut ::std::os::raw::c_ulonglong,
@@ -637,7 +627,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_encrypt_detached(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -651,7 +641,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_decrypt_detached(
         m: *mut ::std::os::raw::c_uchar,
         nsec: *mut ::std::os::raw::c_uchar,
@@ -664,95 +654,74 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_aead_xchacha20poly1305_ietf_keygen(k: *mut ::std::os::raw::c_uchar);
 }
 #[repr(C)]
-#[derive(Copy, Clone)]
+#[derive(Debug, Copy, Clone)]
 pub struct crypto_hash_sha512_state {
     pub state: [u64; 8usize],
     pub count: [u64; 2usize],
     pub buf: [u8; 128usize],
 }
-#[test]
-fn bindgen_test_layout_crypto_hash_sha512_state() {
-    assert_eq!(
-        ::std::mem::size_of::<crypto_hash_sha512_state>(),
-        208usize,
-        concat!("Size of: ", stringify!(crypto_hash_sha512_state))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<crypto_hash_sha512_state>(),
-        8usize,
-        concat!("Alignment of ", stringify!(crypto_hash_sha512_state))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<crypto_hash_sha512_state>())).state as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_hash_sha512_state),
-            "::",
-            stringify!(state)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<crypto_hash_sha512_state>())).count as *const _ as usize },
-        64usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_hash_sha512_state),
-            "::",
-            stringify!(count)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<crypto_hash_sha512_state>())).buf as *const _ as usize },
-        80usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_hash_sha512_state),
-            "::",
-            stringify!(buf)
-        )
-    );
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of crypto_hash_sha512_state"]
+        [::std::mem::size_of::<crypto_hash_sha512_state>() - 208usize];
+    ["Alignment of crypto_hash_sha512_state"]
+        [::std::mem::align_of::<crypto_hash_sha512_state>() - 8usize];
+    ["Offset of field: crypto_hash_sha512_state::state"]
+        [::std::mem::offset_of!(crypto_hash_sha512_state, state) - 0usize];
+    ["Offset of field: crypto_hash_sha512_state::count"]
+        [::std::mem::offset_of!(crypto_hash_sha512_state, count) - 64usize];
+    ["Offset of field: crypto_hash_sha512_state::buf"]
+        [::std::mem::offset_of!(crypto_hash_sha512_state, buf) - 80usize];
+};
+impl Default for crypto_hash_sha512_state {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
+        unsafe {
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha512_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha512_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha512(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha512_init(state: *mut crypto_hash_sha512_state) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha512_update(
         state: *mut crypto_hash_sha512_state,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha512_final(
         state: *mut crypto_hash_sha512_state,
         out: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -760,7 +729,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512_verify(
         h: *const ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -769,81 +738,64 @@ extern "C" {
     ) -> ::std::os::raw::c_int;
 }
 #[repr(C)]
-#[derive(Copy, Clone)]
+#[derive(Debug, Copy, Clone)]
 pub struct crypto_auth_hmacsha512_state {
     pub ictx: crypto_hash_sha512_state,
     pub octx: crypto_hash_sha512_state,
 }
-#[test]
-fn bindgen_test_layout_crypto_auth_hmacsha512_state() {
-    assert_eq!(
-        ::std::mem::size_of::<crypto_auth_hmacsha512_state>(),
-        416usize,
-        concat!("Size of: ", stringify!(crypto_auth_hmacsha512_state))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<crypto_auth_hmacsha512_state>(),
-        8usize,
-        concat!("Alignment of ", stringify!(crypto_auth_hmacsha512_state))
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<crypto_auth_hmacsha512_state>())).ictx as *const _ as usize
-        },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_auth_hmacsha512_state),
-            "::",
-            stringify!(ictx)
-        )
-    );
-    assert_eq!(
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of crypto_auth_hmacsha512_state"]
+        [::std::mem::size_of::<crypto_auth_hmacsha512_state>() - 416usize];
+    ["Alignment of crypto_auth_hmacsha512_state"]
+        [::std::mem::align_of::<crypto_auth_hmacsha512_state>() - 8usize];
+    ["Offset of field: crypto_auth_hmacsha512_state::ictx"]
+        [::std::mem::offset_of!(crypto_auth_hmacsha512_state, ictx) - 0usize];
+    ["Offset of field: crypto_auth_hmacsha512_state::octx"]
+        [::std::mem::offset_of!(crypto_auth_hmacsha512_state, octx) - 208usize];
+};
+impl Default for crypto_auth_hmacsha512_state {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
         unsafe {
-            &(*(::std::ptr::null::<crypto_auth_hmacsha512_state>())).octx as *const _ as usize
-        },
-        208usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_auth_hmacsha512_state),
-            "::",
-            stringify!(octx)
-        )
-    );
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512_init(
         state: *mut crypto_auth_hmacsha512_state,
         key: *const ::std::os::raw::c_uchar,
         keylen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512_update(
         state: *mut crypto_auth_hmacsha512_state,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512_final(
         state: *mut crypto_auth_hmacsha512_state,
         out: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512256_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512256_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512256(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -851,7 +803,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512256_verify(
         h: *const ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -860,42 +812,42 @@ extern "C" {
     ) -> ::std::os::raw::c_int;
 }
 pub type crypto_auth_hmacsha512256_state = crypto_auth_hmacsha512_state;
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512256_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512256_init(
         state: *mut crypto_auth_hmacsha512256_state,
         key: *const ::std::os::raw::c_uchar,
         keylen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512256_update(
         state: *mut crypto_auth_hmacsha512256_state,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512256_final(
         state: *mut crypto_auth_hmacsha512256_state,
         out: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha512256_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -903,7 +855,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_verify(
         h: *const ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -911,95 +863,74 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_keygen(k: *mut ::std::os::raw::c_uchar);
 }
 #[repr(C)]
-#[derive(Copy, Clone)]
+#[derive(Debug, Copy, Clone)]
 pub struct crypto_hash_sha256_state {
     pub state: [u32; 8usize],
     pub count: u64,
     pub buf: [u8; 64usize],
 }
-#[test]
-fn bindgen_test_layout_crypto_hash_sha256_state() {
-    assert_eq!(
-        ::std::mem::size_of::<crypto_hash_sha256_state>(),
-        104usize,
-        concat!("Size of: ", stringify!(crypto_hash_sha256_state))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<crypto_hash_sha256_state>(),
-        8usize,
-        concat!("Alignment of ", stringify!(crypto_hash_sha256_state))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<crypto_hash_sha256_state>())).state as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_hash_sha256_state),
-            "::",
-            stringify!(state)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<crypto_hash_sha256_state>())).count as *const _ as usize },
-        32usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_hash_sha256_state),
-            "::",
-            stringify!(count)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<crypto_hash_sha256_state>())).buf as *const _ as usize },
-        40usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_hash_sha256_state),
-            "::",
-            stringify!(buf)
-        )
-    );
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of crypto_hash_sha256_state"]
+        [::std::mem::size_of::<crypto_hash_sha256_state>() - 104usize];
+    ["Alignment of crypto_hash_sha256_state"]
+        [::std::mem::align_of::<crypto_hash_sha256_state>() - 8usize];
+    ["Offset of field: crypto_hash_sha256_state::state"]
+        [::std::mem::offset_of!(crypto_hash_sha256_state, state) - 0usize];
+    ["Offset of field: crypto_hash_sha256_state::count"]
+        [::std::mem::offset_of!(crypto_hash_sha256_state, count) - 32usize];
+    ["Offset of field: crypto_hash_sha256_state::buf"]
+        [::std::mem::offset_of!(crypto_hash_sha256_state, buf) - 40usize];
+};
+impl Default for crypto_hash_sha256_state {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
+        unsafe {
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha256_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha256_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha256(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha256_init(state: *mut crypto_hash_sha256_state) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha256_update(
         state: *mut crypto_hash_sha256_state,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_sha256_final(
         state: *mut crypto_hash_sha256_state,
         out: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha256_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha256_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha256(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1007,7 +938,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha256_verify(
         h: *const ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1016,84 +947,67 @@ extern "C" {
     ) -> ::std::os::raw::c_int;
 }
 #[repr(C)]
-#[derive(Copy, Clone)]
+#[derive(Debug, Copy, Clone)]
 pub struct crypto_auth_hmacsha256_state {
     pub ictx: crypto_hash_sha256_state,
     pub octx: crypto_hash_sha256_state,
 }
-#[test]
-fn bindgen_test_layout_crypto_auth_hmacsha256_state() {
-    assert_eq!(
-        ::std::mem::size_of::<crypto_auth_hmacsha256_state>(),
-        208usize,
-        concat!("Size of: ", stringify!(crypto_auth_hmacsha256_state))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<crypto_auth_hmacsha256_state>(),
-        8usize,
-        concat!("Alignment of ", stringify!(crypto_auth_hmacsha256_state))
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<crypto_auth_hmacsha256_state>())).ictx as *const _ as usize
-        },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_auth_hmacsha256_state),
-            "::",
-            stringify!(ictx)
-        )
-    );
-    assert_eq!(
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of crypto_auth_hmacsha256_state"]
+        [::std::mem::size_of::<crypto_auth_hmacsha256_state>() - 208usize];
+    ["Alignment of crypto_auth_hmacsha256_state"]
+        [::std::mem::align_of::<crypto_auth_hmacsha256_state>() - 8usize];
+    ["Offset of field: crypto_auth_hmacsha256_state::ictx"]
+        [::std::mem::offset_of!(crypto_auth_hmacsha256_state, ictx) - 0usize];
+    ["Offset of field: crypto_auth_hmacsha256_state::octx"]
+        [::std::mem::offset_of!(crypto_auth_hmacsha256_state, octx) - 104usize];
+};
+impl Default for crypto_auth_hmacsha256_state {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
         unsafe {
-            &(*(::std::ptr::null::<crypto_auth_hmacsha256_state>())).octx as *const _ as usize
-        },
-        104usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_auth_hmacsha256_state),
-            "::",
-            stringify!(octx)
-        )
-    );
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha256_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha256_init(
         state: *mut crypto_auth_hmacsha256_state,
         key: *const ::std::os::raw::c_uchar,
         keylen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha256_update(
         state: *mut crypto_auth_hmacsha256_state,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha256_final(
         state: *mut crypto_auth_hmacsha256_state,
         out: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_auth_hmacsha256_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xsalsa20_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xsalsa20_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xsalsa20_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xsalsa20(
         c: *mut ::std::os::raw::c_uchar,
         clen: ::std::os::raw::c_ulonglong,
@@ -1101,7 +1015,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xsalsa20_xor(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -1110,7 +1024,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xsalsa20_xor_ic(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -1120,57 +1034,57 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xsalsa20_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_seedbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_publickeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_secretkeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_beforenmbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_macbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_seed_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
         seed: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_beforenm(
         k: *mut ::std::os::raw::c_uchar,
         pk: *const ::std::os::raw::c_uchar,
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_boxzerobytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_zerobytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -1180,7 +1094,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_open(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -1190,7 +1104,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_afternm(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -1199,7 +1113,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xsalsa20poly1305_open_afternm(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -1208,41 +1122,41 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_seedbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_publickeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_secretkeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_macbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_seed_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
         seed: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_easy(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -1252,7 +1166,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_open_easy(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -1262,7 +1176,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_detached(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -1273,7 +1187,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_open_detached(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -1284,17 +1198,17 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_beforenmbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_beforenm(
         k: *mut ::std::os::raw::c_uchar,
         pk: *const ::std::os::raw::c_uchar,
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_easy_afternm(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -1303,7 +1217,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_open_easy_afternm(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -1312,7 +1226,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_detached_afternm(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -1322,7 +1236,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_open_detached_afternm(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -1332,10 +1246,10 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_sealbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_seal(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -1343,7 +1257,7 @@ extern "C" {
         pk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_seal_open(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -1352,13 +1266,13 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_zerobytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_boxzerobytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -1368,7 +1282,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_open(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -1378,7 +1292,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_afternm(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -1387,7 +1301,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_open_afternm(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -1396,19 +1310,19 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hsalsa20_outputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hsalsa20_inputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hsalsa20_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hsalsa20_constbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hsalsa20(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1416,19 +1330,19 @@ extern "C" {
         c: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hchacha20_outputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hchacha20_inputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hchacha20_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hchacha20_constbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_hchacha20(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1436,19 +1350,19 @@ extern "C" {
         c: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa20_outputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa20_inputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa20_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa20_constbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa20(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1456,19 +1370,19 @@ extern "C" {
         c: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa2012_outputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa2012_inputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa2012_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa2012_constbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa2012(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1476,19 +1390,19 @@ extern "C" {
         c: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa208_outputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa208_inputbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa208_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa208_constbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_salsa208(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1498,66 +1412,56 @@ extern "C" {
 }
 #[repr(C)]
 #[repr(align(64))]
-#[derive(Copy, Clone)]
+#[derive(Debug, Copy, Clone)]
 pub struct crypto_generichash_blake2b_state {
     pub opaque: [::std::os::raw::c_uchar; 384usize],
 }
-#[test]
-fn bindgen_test_layout_crypto_generichash_blake2b_state() {
-    assert_eq!(
-        ::std::mem::size_of::<crypto_generichash_blake2b_state>(),
-        384usize,
-        concat!("Size of: ", stringify!(crypto_generichash_blake2b_state))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<crypto_generichash_blake2b_state>(),
-        64usize,
-        concat!(
-            "Alignment of ",
-            stringify!(crypto_generichash_blake2b_state)
-        )
-    );
-    assert_eq!(
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of crypto_generichash_blake2b_state"]
+        [::std::mem::size_of::<crypto_generichash_blake2b_state>() - 384usize];
+    ["Alignment of crypto_generichash_blake2b_state"]
+        [::std::mem::align_of::<crypto_generichash_blake2b_state>() - 64usize];
+    ["Offset of field: crypto_generichash_blake2b_state::opaque"]
+        [::std::mem::offset_of!(crypto_generichash_blake2b_state, opaque) - 0usize];
+};
+impl Default for crypto_generichash_blake2b_state {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
         unsafe {
-            &(*(::std::ptr::null::<crypto_generichash_blake2b_state>())).opaque as *const _ as usize
-        },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_generichash_blake2b_state),
-            "::",
-            stringify!(opaque)
-        )
-    );
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_bytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_bytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_keybytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_keybytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_saltbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_personalbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b(
         out: *mut ::std::os::raw::c_uchar,
         outlen: usize,
@@ -1567,7 +1471,7 @@ extern "C" {
         keylen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_salt_personal(
         out: *mut ::std::os::raw::c_uchar,
         outlen: usize,
@@ -1579,7 +1483,7 @@ extern "C" {
         personal: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_init(
         state: *mut crypto_generichash_blake2b_state,
         key: *const ::std::os::raw::c_uchar,
@@ -1587,7 +1491,7 @@ extern "C" {
         outlen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_init_salt_personal(
         state: *mut crypto_generichash_blake2b_state,
         key: *const ::std::os::raw::c_uchar,
@@ -1597,49 +1501,49 @@ extern "C" {
         personal: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_update(
         state: *mut crypto_generichash_blake2b_state,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_final(
         state: *mut crypto_generichash_blake2b_state,
         out: *mut ::std::os::raw::c_uchar,
         outlen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_blake2b_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_bytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_bytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_keybytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_keybytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_primitive() -> *const ::std::os::raw::c_char;
 }
 pub type crypto_generichash_state = crypto_generichash_blake2b_state;
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash(
         out: *mut ::std::os::raw::c_uchar,
         outlen: usize,
@@ -1649,7 +1553,7 @@ extern "C" {
         keylen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_init(
         state: *mut crypto_generichash_state,
         key: *const ::std::os::raw::c_uchar,
@@ -1657,49 +1561,49 @@ extern "C" {
         outlen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_update(
         state: *mut crypto_generichash_state,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_final(
         state: *mut crypto_generichash_state,
         out: *mut ::std::os::raw::c_uchar,
         outlen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_generichash_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_hash_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_blake2b_bytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_blake2b_bytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_blake2b_contextbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_blake2b_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_blake2b_derive_from_key(
         subkey: *mut ::std::os::raw::c_uchar,
         subkey_len: usize,
@@ -1708,22 +1612,22 @@ extern "C" {
         key: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_bytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_bytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_contextbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_derive_from_key(
         subkey: *mut ::std::os::raw::c_uchar,
         subkey_len: usize,
@@ -1732,38 +1636,38 @@ extern "C" {
         key: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kdf_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kx_publickeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kx_secretkeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kx_seedbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kx_sessionkeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kx_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kx_seed_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
         seed: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kx_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kx_client_session_keys(
         rx: *mut ::std::os::raw::c_uchar,
         tx: *mut ::std::os::raw::c_uchar,
@@ -1772,7 +1676,7 @@ extern "C" {
         server_pk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_kx_server_session_keys(
         rx: *mut ::std::os::raw::c_uchar,
         tx: *mut ::std::os::raw::c_uchar,
@@ -1783,49 +1687,38 @@ extern "C" {
 }
 #[repr(C)]
 #[repr(align(16))]
-#[derive(Copy, Clone)]
+#[derive(Debug, Copy, Clone)]
 pub struct crypto_onetimeauth_poly1305_state {
     pub opaque: [::std::os::raw::c_uchar; 256usize],
 }
-#[test]
-fn bindgen_test_layout_crypto_onetimeauth_poly1305_state() {
-    assert_eq!(
-        ::std::mem::size_of::<crypto_onetimeauth_poly1305_state>(),
-        256usize,
-        concat!("Size of: ", stringify!(crypto_onetimeauth_poly1305_state))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<crypto_onetimeauth_poly1305_state>(),
-        16usize,
-        concat!(
-            "Alignment of ",
-            stringify!(crypto_onetimeauth_poly1305_state)
-        )
-    );
-    assert_eq!(
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of crypto_onetimeauth_poly1305_state"]
+        [::std::mem::size_of::<crypto_onetimeauth_poly1305_state>() - 256usize];
+    ["Alignment of crypto_onetimeauth_poly1305_state"]
+        [::std::mem::align_of::<crypto_onetimeauth_poly1305_state>() - 16usize];
+    ["Offset of field: crypto_onetimeauth_poly1305_state::opaque"]
+        [::std::mem::offset_of!(crypto_onetimeauth_poly1305_state, opaque) - 0usize];
+};
+impl Default for crypto_onetimeauth_poly1305_state {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
         unsafe {
-            &(*(::std::ptr::null::<crypto_onetimeauth_poly1305_state>())).opaque as *const _
-                as usize
-        },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_onetimeauth_poly1305_state),
-            "::",
-            stringify!(opaque)
-        )
-    );
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_poly1305_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_poly1305_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_poly1305_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_poly1305(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1833,7 +1726,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_poly1305_verify(
         h: *const ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1841,42 +1734,42 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_poly1305_init(
         state: *mut crypto_onetimeauth_poly1305_state,
         key: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_poly1305_update(
         state: *mut crypto_onetimeauth_poly1305_state,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_poly1305_final(
         state: *mut crypto_onetimeauth_poly1305_state,
         out: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_poly1305_keygen(k: *mut ::std::os::raw::c_uchar);
 }
 pub type crypto_onetimeauth_state = crypto_onetimeauth_poly1305_state;
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1884,7 +1777,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_verify(
         h: *const ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -1892,83 +1785,83 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_init(
         state: *mut crypto_onetimeauth_state,
         key: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_update(
         state: *mut crypto_onetimeauth_state,
         in_: *const ::std::os::raw::c_uchar,
         inlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_final(
         state: *mut crypto_onetimeauth_state,
         out: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_onetimeauth_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_alg_argon2i13() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_bytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_bytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_passwd_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_passwd_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_saltbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_strbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_strprefix() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_opslimit_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_opslimit_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_memlimit_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_memlimit_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_opslimit_interactive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_memlimit_interactive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_opslimit_moderate() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_memlimit_moderate() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_opslimit_sensitive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_memlimit_sensitive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i(
         out: *mut ::std::os::raw::c_uchar,
         outlen: ::std::os::raw::c_ulonglong,
@@ -1980,7 +1873,7 @@ extern "C" {
         alg: ::std::os::raw::c_int,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_str(
         out: *mut ::std::os::raw::c_char,
         passwd: *const ::std::os::raw::c_char,
@@ -1989,75 +1882,75 @@ extern "C" {
         memlimit: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_str_verify(
-        str: *const ::std::os::raw::c_char,
+        str_: *const ::std::os::raw::c_char,
         passwd: *const ::std::os::raw::c_char,
         passwdlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2i_str_needs_rehash(
-        str: *const ::std::os::raw::c_char,
+        str_: *const ::std::os::raw::c_char,
         opslimit: ::std::os::raw::c_ulonglong,
         memlimit: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_alg_argon2id13() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_bytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_bytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_passwd_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_passwd_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_saltbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_strbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_strprefix() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_opslimit_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_opslimit_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_memlimit_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_memlimit_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_opslimit_interactive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_memlimit_interactive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_opslimit_moderate() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_memlimit_moderate() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_opslimit_sensitive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_memlimit_sensitive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id(
         out: *mut ::std::os::raw::c_uchar,
         outlen: ::std::os::raw::c_ulonglong,
@@ -2069,7 +1962,7 @@ extern "C" {
         alg: ::std::os::raw::c_int,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_str(
         out: *mut ::std::os::raw::c_char,
         passwd: *const ::std::os::raw::c_char,
@@ -2078,81 +1971,81 @@ extern "C" {
         memlimit: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_str_verify(
-        str: *const ::std::os::raw::c_char,
+        str_: *const ::std::os::raw::c_char,
         passwd: *const ::std::os::raw::c_char,
         passwdlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_argon2id_str_needs_rehash(
-        str: *const ::std::os::raw::c_char,
+        str_: *const ::std::os::raw::c_char,
         opslimit: ::std::os::raw::c_ulonglong,
         memlimit: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_alg_argon2i13() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_alg_argon2id13() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_alg_default() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_bytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_bytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_passwd_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_passwd_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_saltbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_strbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_strprefix() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_opslimit_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_opslimit_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_memlimit_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_memlimit_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_opslimit_interactive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_memlimit_interactive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_opslimit_moderate() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_memlimit_moderate() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_opslimit_sensitive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_memlimit_sensitive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash(
         out: *mut ::std::os::raw::c_uchar,
         outlen: ::std::os::raw::c_ulonglong,
@@ -2164,7 +2057,7 @@ extern "C" {
         alg: ::std::os::raw::c_int,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_str(
         out: *mut ::std::os::raw::c_char,
         passwd: *const ::std::os::raw::c_char,
@@ -2173,7 +2066,7 @@ extern "C" {
         memlimit: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_str_alg(
         out: *mut ::std::os::raw::c_char,
         passwd: *const ::std::os::raw::c_char,
@@ -2183,77 +2076,77 @@ extern "C" {
         alg: ::std::os::raw::c_int,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_str_verify(
-        str: *const ::std::os::raw::c_char,
+        str_: *const ::std::os::raw::c_char,
         passwd: *const ::std::os::raw::c_char,
         passwdlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_str_needs_rehash(
-        str: *const ::std::os::raw::c_char,
+        str_: *const ::std::os::raw::c_char,
         opslimit: ::std::os::raw::c_ulonglong,
         memlimit: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_curve25519_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_curve25519_scalarbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_curve25519(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
         p: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_curve25519_base(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_scalarbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_base(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
         p: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xsalsa20poly1305_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xsalsa20poly1305_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xsalsa20poly1305_macbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xsalsa20poly1305_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xsalsa20poly1305(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2262,7 +2155,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xsalsa20poly1305_open(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -2271,31 +2164,31 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xsalsa20poly1305_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xsalsa20poly1305_boxzerobytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xsalsa20poly1305_zerobytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_macbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_easy(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2304,7 +2197,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_open_easy(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -2313,7 +2206,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_detached(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -2323,7 +2216,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_open_detached(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -2333,16 +2226,16 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_zerobytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_boxzerobytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2351,7 +2244,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_open(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -2360,16 +2253,16 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20(
         c: *mut ::std::os::raw::c_uchar,
         clen: ::std::os::raw::c_ulonglong,
@@ -2377,7 +2270,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_xor(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2386,7 +2279,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_xor_ic(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2396,19 +2289,19 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_ietf_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_ietf_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_ietf_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_ietf(
         c: *mut ::std::os::raw::c_uchar,
         clen: ::std::os::raw::c_ulonglong,
@@ -2416,7 +2309,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_ietf_xor(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2425,7 +2318,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_ietf_xor_ic(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2435,112 +2328,67 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_chacha20_ietf_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_abytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_headerbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_tag_message() -> ::std::os::raw::c_uchar;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_tag_push() -> ::std::os::raw::c_uchar;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_tag_rekey() -> ::std::os::raw::c_uchar;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_tag_final() -> ::std::os::raw::c_uchar;
 }
 #[repr(C)]
-#[derive(Debug, Copy, Clone)]
+#[derive(Debug, Default, Copy, Clone)]
 pub struct crypto_secretstream_xchacha20poly1305_state {
     pub k: [::std::os::raw::c_uchar; 32usize],
     pub nonce: [::std::os::raw::c_uchar; 12usize],
     pub _pad: [::std::os::raw::c_uchar; 8usize],
 }
-#[test]
-fn bindgen_test_layout_crypto_secretstream_xchacha20poly1305_state() {
-    assert_eq!(
-        ::std::mem::size_of::<crypto_secretstream_xchacha20poly1305_state>(),
-        52usize,
-        concat!(
-            "Size of: ",
-            stringify!(crypto_secretstream_xchacha20poly1305_state)
-        )
-    );
-    assert_eq!(
-        ::std::mem::align_of::<crypto_secretstream_xchacha20poly1305_state>(),
-        1usize,
-        concat!(
-            "Alignment of ",
-            stringify!(crypto_secretstream_xchacha20poly1305_state)
-        )
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<crypto_secretstream_xchacha20poly1305_state>())).k as *const _
-                as usize
-        },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_secretstream_xchacha20poly1305_state),
-            "::",
-            stringify!(k)
-        )
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<crypto_secretstream_xchacha20poly1305_state>())).nonce
-                as *const _ as usize
-        },
-        32usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_secretstream_xchacha20poly1305_state),
-            "::",
-            stringify!(nonce)
-        )
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<crypto_secretstream_xchacha20poly1305_state>()))._pad as *const _
-                as usize
-        },
-        44usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_secretstream_xchacha20poly1305_state),
-            "::",
-            stringify!(_pad)
-        )
-    );
-}
-extern "C" {
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of crypto_secretstream_xchacha20poly1305_state"]
+        [::std::mem::size_of::<crypto_secretstream_xchacha20poly1305_state>() - 52usize];
+    ["Alignment of crypto_secretstream_xchacha20poly1305_state"]
+        [::std::mem::align_of::<crypto_secretstream_xchacha20poly1305_state>() - 1usize];
+    ["Offset of field: crypto_secretstream_xchacha20poly1305_state::k"]
+        [::std::mem::offset_of!(crypto_secretstream_xchacha20poly1305_state, k) - 0usize];
+    ["Offset of field: crypto_secretstream_xchacha20poly1305_state::nonce"]
+        [::std::mem::offset_of!(crypto_secretstream_xchacha20poly1305_state, nonce) - 32usize];
+    ["Offset of field: crypto_secretstream_xchacha20poly1305_state::_pad"]
+        [::std::mem::offset_of!(crypto_secretstream_xchacha20poly1305_state, _pad) - 44usize];
+};
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_init_push(
         state: *mut crypto_secretstream_xchacha20poly1305_state,
         header: *mut ::std::os::raw::c_uchar,
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_push(
         state: *mut crypto_secretstream_xchacha20poly1305_state,
         c: *mut ::std::os::raw::c_uchar,
@@ -2552,14 +2400,14 @@ extern "C" {
         tag: ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_init_pull(
         state: *mut crypto_secretstream_xchacha20poly1305_state,
         header: *const ::std::os::raw::c_uchar,
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_pull(
         state: *mut crypto_secretstream_xchacha20poly1305_state,
         m: *mut ::std::os::raw::c_uchar,
@@ -2571,18 +2419,18 @@ extern "C" {
         adlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretstream_xchacha20poly1305_rekey(
         state: *mut crypto_secretstream_xchacha20poly1305_state,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_siphash24_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_siphash24_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_siphash24(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -2590,13 +2438,13 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_siphashx24_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_siphashx24_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_siphashx24(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -2604,16 +2452,16 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash(
         out: *mut ::std::os::raw::c_uchar,
         in_: *const ::std::os::raw::c_uchar,
@@ -2621,56 +2469,51 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_shorthash_keygen(k: *mut ::std::os::raw::c_uchar);
 }
 #[repr(C)]
-#[derive(Copy, Clone)]
+#[derive(Debug, Copy, Clone)]
 pub struct crypto_sign_ed25519ph_state {
     pub hs: crypto_hash_sha512_state,
 }
-#[test]
-fn bindgen_test_layout_crypto_sign_ed25519ph_state() {
-    assert_eq!(
-        ::std::mem::size_of::<crypto_sign_ed25519ph_state>(),
-        208usize,
-        concat!("Size of: ", stringify!(crypto_sign_ed25519ph_state))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<crypto_sign_ed25519ph_state>(),
-        8usize,
-        concat!("Alignment of ", stringify!(crypto_sign_ed25519ph_state))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<crypto_sign_ed25519ph_state>())).hs as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(crypto_sign_ed25519ph_state),
-            "::",
-            stringify!(hs)
-        )
-    );
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of crypto_sign_ed25519ph_state"]
+        [::std::mem::size_of::<crypto_sign_ed25519ph_state>() - 208usize];
+    ["Alignment of crypto_sign_ed25519ph_state"]
+        [::std::mem::align_of::<crypto_sign_ed25519ph_state>() - 8usize];
+    ["Offset of field: crypto_sign_ed25519ph_state::hs"]
+        [::std::mem::offset_of!(crypto_sign_ed25519ph_state, hs) - 0usize];
+};
+impl Default for crypto_sign_ed25519ph_state {
+    fn default() -> Self {
+        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
+        unsafe {
+            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
+            s.assume_init()
+        }
+    }
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519ph_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_seedbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_publickeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_secretkeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519(
         sm: *mut ::std::os::raw::c_uchar,
         smlen_p: *mut ::std::os::raw::c_ulonglong,
@@ -2679,7 +2522,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_open(
         m: *mut ::std::os::raw::c_uchar,
         mlen_p: *mut ::std::os::raw::c_ulonglong,
@@ -2688,7 +2531,7 @@ extern "C" {
         pk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_detached(
         sig: *mut ::std::os::raw::c_uchar,
         siglen_p: *mut ::std::os::raw::c_ulonglong,
@@ -2697,7 +2540,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_verify_detached(
         sig: *const ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2705,56 +2548,56 @@ extern "C" {
         pk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_seed_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
         seed: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_pk_to_curve25519(
         curve25519_pk: *mut ::std::os::raw::c_uchar,
         ed25519_pk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_sk_to_curve25519(
         curve25519_sk: *mut ::std::os::raw::c_uchar,
         ed25519_sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_sk_to_seed(
         seed: *mut ::std::os::raw::c_uchar,
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519_sk_to_pk(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519ph_init(
         state: *mut crypto_sign_ed25519ph_state,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519ph_update(
         state: *mut crypto_sign_ed25519ph_state,
         m: *const ::std::os::raw::c_uchar,
         mlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519ph_final_create(
         state: *mut crypto_sign_ed25519ph_state,
         sig: *mut ::std::os::raw::c_uchar,
@@ -2762,7 +2605,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_ed25519ph_final_verify(
         state: *mut crypto_sign_ed25519ph_state,
         sig: *const ::std::os::raw::c_uchar,
@@ -2770,41 +2613,41 @@ extern "C" {
     ) -> ::std::os::raw::c_int;
 }
 pub type crypto_sign_state = crypto_sign_ed25519ph_state;
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_statebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_seedbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_publickeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_secretkeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_seed_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
         seed: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign(
         sm: *mut ::std::os::raw::c_uchar,
         smlen_p: *mut ::std::os::raw::c_ulonglong,
@@ -2813,7 +2656,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_open(
         m: *mut ::std::os::raw::c_uchar,
         mlen_p: *mut ::std::os::raw::c_ulonglong,
@@ -2822,7 +2665,7 @@ extern "C" {
         pk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_detached(
         sig: *mut ::std::os::raw::c_uchar,
         siglen_p: *mut ::std::os::raw::c_ulonglong,
@@ -2831,7 +2674,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_verify_detached(
         sig: *const ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2839,17 +2682,17 @@ extern "C" {
         pk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_init(state: *mut crypto_sign_state) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_update(
         state: *mut crypto_sign_state,
         m: *const ::std::os::raw::c_uchar,
         mlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_final_create(
         state: *mut crypto_sign_state,
         sig: *mut ::std::os::raw::c_uchar,
@@ -2857,26 +2700,26 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_sign_final_verify(
         state: *mut crypto_sign_state,
         sig: *const ::std::os::raw::c_uchar,
         pk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_primitive() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream(
         c: *mut ::std::os::raw::c_uchar,
         clen: ::std::os::raw::c_ulonglong,
@@ -2884,7 +2727,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xor(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2893,19 +2736,19 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa20_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa20_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa20_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa20(
         c: *mut ::std::os::raw::c_uchar,
         clen: ::std::os::raw::c_ulonglong,
@@ -2913,7 +2756,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa20_xor(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2922,7 +2765,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa20_xor_ic(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -2932,38 +2775,38 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa20_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_verify_16_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_verify_16(
         x: *const ::std::os::raw::c_uchar,
         y: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_verify_32_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_verify_32(
         x: *const ::std::os::raw::c_uchar,
         y: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_verify_64_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_verify_64(
         x: *const ::std::os::raw::c_uchar,
         y: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
 #[repr(C)]
-#[derive(Debug, Copy, Clone)]
+#[derive(Debug, Default, Copy, Clone)]
 pub struct randombytes_implementation {
     pub implementation_name:
         ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
@@ -2974,195 +2817,132 @@ pub struct randombytes_implementation {
         ::std::option::Option<unsafe extern "C" fn(buf: *mut ::std::os::raw::c_void, size: usize)>,
     pub close: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
 }
-#[test]
-fn bindgen_test_layout_randombytes_implementation() {
-    assert_eq!(
-        ::std::mem::size_of::<randombytes_implementation>(),
-        48usize,
-        concat!("Size of: ", stringify!(randombytes_implementation))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<randombytes_implementation>(),
-        8usize,
-        concat!("Alignment of ", stringify!(randombytes_implementation))
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<randombytes_implementation>())).implementation_name as *const _
-                as usize
-        },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(randombytes_implementation),
-            "::",
-            stringify!(implementation_name)
-        )
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<randombytes_implementation>())).random as *const _ as usize
-        },
-        8usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(randombytes_implementation),
-            "::",
-            stringify!(random)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<randombytes_implementation>())).stir as *const _ as usize },
-        16usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(randombytes_implementation),
-            "::",
-            stringify!(stir)
-        )
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<randombytes_implementation>())).uniform as *const _ as usize
-        },
-        24usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(randombytes_implementation),
-            "::",
-            stringify!(uniform)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<randombytes_implementation>())).buf as *const _ as usize },
-        32usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(randombytes_implementation),
-            "::",
-            stringify!(buf)
-        )
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<randombytes_implementation>())).close as *const _ as usize
-        },
-        40usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(randombytes_implementation),
-            "::",
-            stringify!(close)
-        )
-    );
-}
-extern "C" {
+#[allow(clippy::unnecessary_operation, clippy::identity_op)]
+const _: () = {
+    ["Size of randombytes_implementation"]
+        [::std::mem::size_of::<randombytes_implementation>() - 48usize];
+    ["Alignment of randombytes_implementation"]
+        [::std::mem::align_of::<randombytes_implementation>() - 8usize];
+    ["Offset of field: randombytes_implementation::implementation_name"]
+        [::std::mem::offset_of!(randombytes_implementation, implementation_name) - 0usize];
+    ["Offset of field: randombytes_implementation::random"]
+        [::std::mem::offset_of!(randombytes_implementation, random) - 8usize];
+    ["Offset of field: randombytes_implementation::stir"]
+        [::std::mem::offset_of!(randombytes_implementation, stir) - 16usize];
+    ["Offset of field: randombytes_implementation::uniform"]
+        [::std::mem::offset_of!(randombytes_implementation, uniform) - 24usize];
+    ["Offset of field: randombytes_implementation::buf"]
+        [::std::mem::offset_of!(randombytes_implementation, buf) - 32usize];
+    ["Offset of field: randombytes_implementation::close"]
+        [::std::mem::offset_of!(randombytes_implementation, close) - 40usize];
+};
+unsafe extern "C" {
     pub fn randombytes_seedbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn randombytes_buf(buf: *mut ::std::os::raw::c_void, size: usize);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn randombytes_buf_deterministic(
         buf: *mut ::std::os::raw::c_void,
         size: usize,
         seed: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn randombytes_random() -> u32;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn randombytes_uniform(upper_bound: u32) -> u32;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn randombytes_stir();
 }
-extern "C" {
+unsafe extern "C" {
     pub fn randombytes_close() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn randombytes_set_implementation(
         impl_: *mut randombytes_implementation,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn randombytes_implementation_name() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_neon() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_sse2() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_sse3() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_ssse3() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_sse41() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_avx() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_avx2() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_avx512f() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_pclmul() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_aesni() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_runtime_has_rdrand() -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_memzero(pnt: *mut ::std::os::raw::c_void, len: usize);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_stackzero(len: usize);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_memcmp(
         b1_: *const ::std::os::raw::c_void,
         b2_: *const ::std::os::raw::c_void,
         len: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_compare(
         b1_: *const ::std::os::raw::c_uchar,
         b2_: *const ::std::os::raw::c_uchar,
         len: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_is_zero(n: *const ::std::os::raw::c_uchar, nlen: usize) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_increment(n: *mut ::std::os::raw::c_uchar, nlen: usize);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_add(
         a: *mut ::std::os::raw::c_uchar,
         b: *const ::std::os::raw::c_uchar,
         len: usize,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_sub(
         a: *mut ::std::os::raw::c_uchar,
         b: *const ::std::os::raw::c_uchar,
         len: usize,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_bin2hex(
         hex: *mut ::std::os::raw::c_char,
         hex_maxlen: usize,
@@ -3170,7 +2950,7 @@ extern "C" {
         bin_len: usize,
     ) -> *mut ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_hex2bin(
         bin: *mut ::std::os::raw::c_uchar,
         bin_maxlen: usize,
@@ -3181,10 +2961,10 @@ extern "C" {
         hex_end: *mut *const ::std::os::raw::c_char,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_base64_encoded_len(bin_len: usize, variant: ::std::os::raw::c_int) -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_bin2base64(
         b64: *mut ::std::os::raw::c_char,
         b64_maxlen: usize,
@@ -3193,7 +2973,7 @@ extern "C" {
         variant: ::std::os::raw::c_int,
     ) -> *mut ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_base642bin(
         bin: *mut ::std::os::raw::c_uchar,
         bin_maxlen: usize,
@@ -3205,31 +2985,31 @@ extern "C" {
         variant: ::std::os::raw::c_int,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_mlock(addr: *mut ::std::os::raw::c_void, len: usize) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_munlock(addr: *mut ::std::os::raw::c_void, len: usize) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_malloc(size: usize) -> *mut ::std::os::raw::c_void;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_allocarray(count: usize, size: usize) -> *mut ::std::os::raw::c_void;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_free(ptr: *mut ::std::os::raw::c_void);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_mprotect_noaccess(ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_mprotect_readonly(ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_mprotect_readwrite(ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_pad(
         padded_buflen_p: *mut usize,
         buf: *mut ::std::os::raw::c_uchar,
@@ -3238,7 +3018,7 @@ extern "C" {
         max_buflen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn sodium_unpad(
         unpadded_buflen_p: *mut usize,
         buf: *const ::std::os::raw::c_uchar,
@@ -3246,16 +3026,16 @@ extern "C" {
         blocksize: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xchacha20_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xchacha20_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xchacha20_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xchacha20(
         c: *mut ::std::os::raw::c_uchar,
         clen: ::std::os::raw::c_ulonglong,
@@ -3263,7 +3043,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xchacha20_xor(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -3272,7 +3052,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xchacha20_xor_ic(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -3282,44 +3062,44 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_xchacha20_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_seedbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_publickeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_secretkeybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_beforenmbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_macbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_seed_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
         seed: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_keypair(
         pk: *mut ::std::os::raw::c_uchar,
         sk: *mut ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_easy(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -3329,7 +3109,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_open_easy(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -3339,7 +3119,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_detached(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -3350,7 +3130,7 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_open_detached(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -3361,14 +3141,14 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_beforenm(
         k: *mut ::std::os::raw::c_uchar,
         pk: *const ::std::os::raw::c_uchar,
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_easy_afternm(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -3377,7 +3157,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_open_easy_afternm(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -3386,7 +3166,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_detached_afternm(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -3396,7 +3176,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_open_detached_afternm(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -3406,10 +3186,10 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_sealbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_seal(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -3417,7 +3197,7 @@ extern "C" {
         pk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_box_curve25519xchacha20poly1305_seal_open(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -3426,255 +3206,255 @@ extern "C" {
         sk: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_uniformbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_hashbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_scalarbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_nonreducedscalarbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_is_valid_point(
         p: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_add(
         r: *mut ::std::os::raw::c_uchar,
         p: *const ::std::os::raw::c_uchar,
         q: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_sub(
         r: *mut ::std::os::raw::c_uchar,
         p: *const ::std::os::raw::c_uchar,
         q: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_from_uniform(
         p: *mut ::std::os::raw::c_uchar,
         r: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_from_hash(
         p: *mut ::std::os::raw::c_uchar,
         h: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_random(p: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_scalar_random(r: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_scalar_invert(
         recip: *mut ::std::os::raw::c_uchar,
         s: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_scalar_negate(
         neg: *mut ::std::os::raw::c_uchar,
         s: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_scalar_complement(
         comp: *mut ::std::os::raw::c_uchar,
         s: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_scalar_add(
         z: *mut ::std::os::raw::c_uchar,
         x: *const ::std::os::raw::c_uchar,
         y: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_scalar_sub(
         z: *mut ::std::os::raw::c_uchar,
         x: *const ::std::os::raw::c_uchar,
         y: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_scalar_mul(
         z: *mut ::std::os::raw::c_uchar,
         x: *const ::std::os::raw::c_uchar,
         y: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ed25519_scalar_reduce(
         r: *mut ::std::os::raw::c_uchar,
         s: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_hashbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_scalarbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_nonreducedscalarbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_is_valid_point(
         p: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_add(
         r: *mut ::std::os::raw::c_uchar,
         p: *const ::std::os::raw::c_uchar,
         q: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_sub(
         r: *mut ::std::os::raw::c_uchar,
         p: *const ::std::os::raw::c_uchar,
         q: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_from_hash(
         p: *mut ::std::os::raw::c_uchar,
         r: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_random(p: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_scalar_random(r: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_scalar_invert(
         recip: *mut ::std::os::raw::c_uchar,
         s: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_scalar_negate(
         neg: *mut ::std::os::raw::c_uchar,
         s: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_scalar_complement(
         comp: *mut ::std::os::raw::c_uchar,
         s: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_scalar_add(
         z: *mut ::std::os::raw::c_uchar,
         x: *const ::std::os::raw::c_uchar,
         y: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_scalar_sub(
         z: *mut ::std::os::raw::c_uchar,
         x: *const ::std::os::raw::c_uchar,
         y: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_scalar_mul(
         z: *mut ::std::os::raw::c_uchar,
         x: *const ::std::os::raw::c_uchar,
         y: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_core_ristretto255_scalar_reduce(
         r: *mut ::std::os::raw::c_uchar,
         s: *const ::std::os::raw::c_uchar,
     );
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ed25519_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ed25519_scalarbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ed25519(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
         p: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ed25519_noclamp(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
         p: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ed25519_base(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ed25519_base_noclamp(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ristretto255_bytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ristretto255_scalarbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ristretto255(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
         p: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_scalarmult_ristretto255_base(
         q: *mut ::std::os::raw::c_uchar,
         n: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xchacha20poly1305_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xchacha20poly1305_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xchacha20poly1305_macbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xchacha20poly1305_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xchacha20poly1305_easy(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -3683,7 +3463,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xchacha20poly1305_open_easy(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -3692,7 +3472,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xchacha20poly1305_detached(
         c: *mut ::std::os::raw::c_uchar,
         mac: *mut ::std::os::raw::c_uchar,
@@ -3702,7 +3482,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_secretbox_xchacha20poly1305_open_detached(
         m: *mut ::std::os::raw::c_uchar,
         c: *const ::std::os::raw::c_uchar,
@@ -3712,52 +3492,52 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_bytes_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_bytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_passwd_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_passwd_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_saltbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_strbytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_strprefix() -> *const ::std::os::raw::c_char;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_opslimit_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_opslimit_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_memlimit_min() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_memlimit_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_opslimit_interactive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_memlimit_interactive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256(
         out: *mut ::std::os::raw::c_uchar,
         outlen: ::std::os::raw::c_ulonglong,
@@ -3768,7 +3548,7 @@ extern "C" {
         memlimit: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_str(
         out: *mut ::std::os::raw::c_char,
         passwd: *const ::std::os::raw::c_char,
@@ -3777,14 +3557,14 @@ extern "C" {
         memlimit: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_str_verify(
-        str: *const ::std::os::raw::c_char,
+        str_: *const ::std::os::raw::c_char,
         passwd: *const ::std::os::raw::c_char,
         passwdlen: ::std::os::raw::c_ulonglong,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_ll(
         passwd: *const u8,
         passwdlen: usize,
@@ -3797,23 +3577,23 @@ extern "C" {
         buflen: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_pwhash_scryptsalsa208sha256_str_needs_rehash(
-        str: *const ::std::os::raw::c_char,
+        str_: *const ::std::os::raw::c_char,
         opslimit: ::std::os::raw::c_ulonglong,
         memlimit: usize,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa2012_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa2012_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa2012_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa2012(
         c: *mut ::std::os::raw::c_uchar,
         clen: ::std::os::raw::c_ulonglong,
@@ -3821,7 +3601,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa2012_xor(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -3830,19 +3610,19 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa2012_keygen(k: *mut ::std::os::raw::c_uchar);
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa208_keybytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa208_noncebytes() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa208_messagebytes_max() -> usize;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa208(
         c: *mut ::std::os::raw::c_uchar,
         clen: ::std::os::raw::c_ulonglong,
@@ -3850,7 +3630,7 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa208_xor(
         c: *mut ::std::os::raw::c_uchar,
         m: *const ::std::os::raw::c_uchar,
@@ -3859,6 +3639,6 @@ extern "C" {
         k: *const ::std::os::raw::c_uchar,
     ) -> ::std::os::raw::c_int;
 }
-extern "C" {
+unsafe extern "C" {
     pub fn crypto_stream_salsa208_keygen(k: *mut ::std::os::raw::c_uchar);
 }
