maintainer="fossdd <fossdd@pwned.life>"
_flavor=stable
pkgname=linux-$_flavor
pkgver=6.15.9
_kernver=${pkgver%.*}
pkgrel=0
pkgdesc="Linux stable kernel"
url="https://www.kernel.org"
depends="initramfs-generator"
_depends_dev="perl gmp-dev mpc1-dev mpfr-dev elfutils-dev bash flex bison zstd"
makedepends="$_depends_dev sed installkernel bc linux-headers linux-firmware-any openssl-dev>3 mawk
	diffutils findutils zstd pahole python3 gcc>=13.1.1_git20230624 bpftool"
provides="linux-edge=$pkgver-r$pkgrel"
options="!strip !check"
_config=${config:-config-stable.${CARCH}}
source="https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/linux-$_kernver.tar.xz
	0001-powerpc-boot-wrapper-Add-z-notext-flag-for-ppc64le.patch
	0002-x86-Compress-vmlinux-with-zstd-19-instead-of-22.patch
	0003-kexec-add-kexec_load_disabled-boot-option.patch
	0004-objtool-respect-AWK-setting.patch
	0005-powerpc-config-defang-gcc-check-for-stack-protector-.patch
	0006-UPSTREAM-powerpc-boot-Fix-build-with-gcc-15.patch
	0007-FROMLIST-libbpf-avoid-possible-use-of-uninitialized-.patch

	stable.aarch64.config
	stable.armv7.config
	stable.loongarch64.config
	stable.ppc64le.config
	stable.riscv64.config
	stable.s390x.config
	stable.x86.config
	stable.x86_64.config
	"
subpackages="$pkgname-dev:_dev:$CBUILD_ARCH $pkgname-doc"
for _i in $source; do
	case $_i in
	*.$CARCH.config)
		_f=${_i%."$CARCH".config}
		_flavors="$_flavors $_f"
		if [ "linux-$_f" != "$pkgname" ]; then
			subpackages="$subpackages linux-$_f::$CBUILD_ARCH linux-$_f-dev:_dev:$CBUILD_ARCH"
		fi
		;;
	esac
done
builddir="$srcdir"/linux-$_kernver

if [ "${pkgver%.0}" = "$pkgver" ]; then
	# Prepend to apply first
	source="patch-$pkgver.patch.xz::https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/patch-$pkgver.xz $source"
fi
arch="all !armhf"
license="GPL-2.0-only"

prepare() {
	default_prepare

	# remove localversion from patch if any
	rm -f localversion*
}

_kernelarch() {
	local arch="$1"
	case "$arch" in
		aarch64*) arch="arm64" ;;
		arm*) arch="arm" ;;
		ppc*) arch="powerpc" ;;
		s390*) arch="s390" ;;
		riscv*) arch="riscv" ;;
		loongarch64) arch="loongarch" ;;
	esac
	echo "$arch"
}

_prepareconfig() {
	local _flavor="$1"
	local _arch="$2"
	local _config=$_flavor.$_arch.config
	local _builddir="$srcdir"/build-$_flavor.$_arch
	mkdir -p "$_builddir"
	echo "-$pkgrel-$_flavor" > "$_builddir"/localversion-alpine

	cp "$srcdir"/$_config "$_builddir"/.config
	msg "Configuring $_flavor kernel ($_arch)"
	make -C "$builddir" \
		O="$_builddir" \
		ARCH="$(_kernelarch $_arch)" \
		olddefconfig

	if grep "CONFIG_MODULE_SIG=y" "$_builddir"/.config >/dev/null; then
		if [ -f "$KERNEL_SIGNING_KEY" ]; then
			sed -i -e "s:^CONFIG_MODULE_SIG_KEY=.*:CONFIG_MODULE_SIG_KEY=\"$KERNEL_SIGNING_KEY\":" \
				"$_builddir"/.config
			msg "Using $KERNEL_SIGNING_KEY to sign $_flavor kernel ($_arch) modules"
		else
			warning "KERNEL_SIGNING_KEY was not set. A signing key will be generated, but 3rd"
			warning "party modules can not be signed"
		fi
	fi
}

listconfigs() {
	for i in $source; do
		case "$i" in
			*.config) echo $i;;
		esac
	done
}

prepareconfigs() {
	for _config in $(listconfigs); do
		local _flavor=${_config%%.*}
		local _arch=${_config%.config}
		_arch=${_arch#*.}
		local _builddir="$srcdir"/build-$_flavor.$_arch
		_prepareconfig "$_flavor" "$_arch"
	done
}

# this is supposed to be run before version is bumped so we can compare
# what new kernel config knobs are introduced
prepareupdate() {
	clean && fetch && unpack && prepare && deps
	prepareconfigs
	rm -r "$builddir"
}

updateconfigs() {
	if ! [ -d "$builddir" ]; then
		deps && fetch && unpack && prepare
	fi
	for _config in ${CONFIGS:-$(listconfigs)}; do
		msg "updating $_config"
		local _flavor=${_config%%.*}
		local _arch=${_config%.config}
		_arch=${_arch#*.}
		local _builddir="$srcdir"/build-$_flavor.$_arch
		mkdir -p "$_builddir"
		echo "-$pkgrel-$_flavor" > "$_builddir"/localversion-alpine
		local actions="listnewconfig oldconfig"
		if ! [ -f "$_builddir"/.config ]; then
			cp "$srcdir"/$_config "$_builddir"/.config
			actions="olddefconfig"
		fi
		env | grep ^CONFIG_ >> "$_builddir"/.config || true
		make -j1 -C "$builddir" \
			O="$_builddir" \
			ARCH="$(_kernelarch $_arch)" \
			$actions savedefconfig

		cp "$_builddir"/defconfig "$startdir"/$_config
	done
}

set_kbuild_timestamp() {
	# KBUILD_BUILD_TIMESTAMP needs to be parsable by busybox date
	export KBUILD_BUILD_TIMESTAMP="$(date '+%Y-%m-%d %H:%M:%S' -u${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
}

build() {
	unset LDFLAGS
	# for some reason these sometimes leak into the kernel build,
	# -Werror=format-security breaks some stuff
	unset CFLAGS CPPFLAGS CXXFLAGS
	set_kbuild_timestamp
	for i in $_flavors; do
		_prepareconfig "$i" "$CARCH"
	done
	for i in $_flavors; do
		msg "Building $i kernel"
		cd "$srcdir"/build-$i.$CARCH

		# set org in cert for modules signing
		# https://www.kernel.org/doc/html/v6.1/admin-guide/module-signing.html#generating-signing-keys
		mkdir -p certs
		sed -e 's/#O = Unspecified company/O = alpinelinux.org/' \
			"$builddir"/certs/default_x509.genkey \
			> certs/x509.genkey

		make ARCH="$(_kernelarch $CARCH)" \
			CC="${CC:-gcc}" \
			AWK="${AWK:-mawk}" \
			KBUILD_BUILD_VERSION="$((pkgrel + 1 ))-Alpine"

		# Generate vmlinux.h
		bpftool btf dump file vmlinux format c > vmlinux.h
	done
}

_package() {
	local _buildflavor="$1" _outdir="$2"
	set_kbuild_timestamp

	cd "$srcdir"/build-$_buildflavor.$CARCH
	local _abi_release="$(make -s kernelrelease)"
	# modules_install seems to regenerate a defect Modules.symvers on s390x. Work
	# around it by backing it up and restore it after modules_install
	cp Module.symvers Module.symvers.backup

	mkdir -p "$_outdir"/boot "$_outdir"/lib/modules

	local _install
	case "$CARCH" in
		arm*|aarch64|riscv*) _install="zinstall dtbs_install";;
		*) _install=install;;
	esac

	make modules_install $_install \
		ARCH="$(_kernelarch $CARCH)" \
		INSTALL_MOD_PATH="$_outdir" \
		INSTALL_MOD_STRIP=1 \
		INSTALL_PATH="$_outdir"/boot \
		INSTALL_DTBS_PATH="$_outdir/boot/dtbs-$_buildflavor"

	cp Module.symvers.backup Module.symvers

	rm -f "$_outdir"/lib/modules/"$_abi_release"/build \
		"$_outdir"/lib/modules/"$_abi_release"/source
	rm -rf "$_outdir"/lib/firmware

	install -D -m644 include/config/kernel.release \
		"$_outdir"/usr/share/kernel/$_buildflavor/kernel.release

	case "$CARCH" in
	loongarch64)
		mv  "$_outdir"/boot/vmlinuz-$_abi_release \
			"$_outdir"/boot/vmlinuz-$_buildflavor

		mv  "$_outdir"/boot/config-$_abi_release \
			"$_outdir"/boot/config-$_buildflavor

		mv  "$_outdir"/boot/System.map-$_abi_release \
			"$_outdir"/boot/System.map-$_buildflavor
		;;
	esac
}

# main flavor installs in $pkgdir
package() {
	depends="$depends linux-firmware-any"

	_package "$_flavor" "$pkgdir"

	# copy files for linux-stable-doc sub package
	mkdir -p "$pkgdir"/usr/share/doc
	cp -r "$builddir"/Documentation \
		"$pkgdir"/usr/share/doc/linux-stable-doc-"$pkgver"/
	# remove files that aren't part of the documentation itself
	for nondoc in .gitignore conf.py docutils.conf Kconfig Makefile; do
		rm "$pkgdir"/usr/share/doc/linux-stable-doc-"$pkgver"/"$nondoc"
	done
	# create /usr/share/doc/linux-stable-doc symlink
	cd "$pkgdir"/usr/share/doc; ln -s linux-stable-doc-"$pkgver" linux-stable-doc
}

_dev() {
	local _flavor=$(echo $subpkgname | sed -E 's/(^linux-|-dev$)//g')
	local _builddir="$srcdir"/build-$_flavor.$CARCH
	local _abi_release="$(make -C "$_builddir" -s kernelrelease)"
	local _karch="$(_kernelarch $CARCH | sed 's/x86_64/x86/')"
	# copy the only the parts that we really need for build 3rd party
	# kernel modules and install those as /usr/src/linux-headers,
	# similar to what ubuntu does
	#
	# this way you dont need to install the 300-400 kernel sources to
	# build a tiny kernel module
	#
	pkgdesc="Headers and script for third party modules for $_flavor kernel"
	depends="$_depends_dev"
	local dir="$subpkgdir"/usr/src/linux-headers-"$_abi_release"
	set_kbuild_timestamp

	# first we import config, run prepare to set up for building
	# external modules, and create the scripts
	mkdir -p "$dir"
	cp -a "$_builddir"/.config "$_builddir"/localversion-alpine \
		"$dir"/

	install -D -t "$dir"/certs "$_builddir"/certs/signing_key.x509 || :

	# Install vmlinux.h
	install -Dm644 "$_builddir"/vmlinux.h -t "$dir/"

	make -C "$builddir" \
		O="$dir" \
		ARCH="$(_kernelarch $CARCH)" \
		AWK="${AWK:-mawk}" \
		prepare modules_prepare scripts

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the sources
	rm "$dir"/Makefile "$dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	cd "$builddir"
	find .  -path './include/*' -prune \
		-o -path './scripts/*' -prune -o -type f \
		\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
		   -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) \
		-print | cpio -pdm "$dir"

	cp -a scripts include "$dir"

	find "arch/$_karch" "tools/include" "tools/arch/$_karch" -type f -path '*/include/*' \
		-print | cpio -pdm "$dir"

	install -Dm644 "$srcdir"/build-$_flavor.$CARCH/Module.symvers \
		"$dir"/Module.symvers

	# remove unneeded things
	msg "Removing documentation..."
	rm -r "$dir"/Documentation
	sed -i -e '/Documentation/d' "$dir"/Kconfig
	find "$dir" -type f \( -name '*.o' -o -name '*.cmd' \) -exec rm -v -- {} +

	mkdir -p "$subpkgdir"/lib/modules/"$_abi_release"
	ln -sf /usr/src/linux-headers-"$_abi_release" \
		"$subpkgdir"/lib/modules/"$_abi_release"/build
}

sha512sums="
34572997debcfac374401783a95d87e7be8754b4f1f4a9f436435c18e75087c05325321d800a22c33f0c4ac379d3b8759095a2b7738807eb51656bdc49b5d382  patch-6.15.9.patch.xz
d03788ffa8d8ae1b84ef1286bb44a08fc01432e509dfec6cccae5c5a5a47201d378aec2bcd21e6f0bbd1e625b26f47780c06ee9c1cef3775358f98b160923f30  linux-6.15.tar.xz
b1923c9dc6b8ab3ea8e3cd2bc26daa5afe60a03a09f3e76d753ce4046ab3d8d30939a9ed226adf9c45a61c2995012b0e20681548baaec4ad19570a63c60e75c7  0001-powerpc-boot-wrapper-Add-z-notext-flag-for-ppc64le.patch
cbd92c1a68cbb50d4777a4c6998fbd3454e21c0dc8cad88fafe0fda6530f6f225041e483add6e4963df1d711780f9c74b913633ec2154cfd085470aaf43ab8b3  0002-x86-Compress-vmlinux-with-zstd-19-instead-of-22.patch
d1a0d51202a62d053c797795c58c00b6f2fb8ae2da446e5bde14cad3d8e287a1347ebaca9926a5b397a3fc8bd6eb07edfb138e14b4652687a1286649bdba312a  0003-kexec-add-kexec_load_disabled-boot-option.patch
a8b246e52e1311ba572460001859f538edddc3b0d57b9daf00eb7c53661be8e57ab2b7e8218dcc86d3abc41ed5e12e5bd237c20f6bb251a260990dee22b82237  0004-objtool-respect-AWK-setting.patch
d65252e9ce16e21edcceec7caf67b9fbd96f41a629d10a0587e2248546cb2015350fa58c55df26f7f4ece18cc4c9c0bdcd6fe10963147da2ce290e2c3765a11b  0005-powerpc-config-defang-gcc-check-for-stack-protector-.patch
3d0300df5fb7446c72d0faf0848783ac7ad6e515a7ccb487079eca0386bb277775e0d6aade2e09b22732aeb2809a34e65da82f6278504eea10e31d474d013168  0006-UPSTREAM-powerpc-boot-Fix-build-with-gcc-15.patch
9f6c368b63ff235655d8b41708c361070ad391118ec749693e2efe8e94eee942ac3a89a82db0223b981ce9eb59a27791d6034bacb3c0505c14e4d0a35bb264e0  0007-FROMLIST-libbpf-avoid-possible-use-of-uninitialized-.patch
b4b3b70ea8f787e692f9bbc562ca4cfe3e734d401035a4f89033809e35d0b104b62e8ecce132b51a8e3db434d5cb2185c44fd57b4d8e8aaa4d2b5442d16b7da9  stable.aarch64.config
148962fef09fe97cacaa93d2cd3dbd730e23590f41c44527b3e8cb64f5d963275756569d845de3b0d8cd6ff1a97c7a0d5ca4ce98eaa95deac9a705d93c7a5074  stable.armv7.config
fb2c110b4ded662fb169496de89bae09ed7416fc8d5bfc6b0268128d632d737e281305223d7c26fb2c84b127d70c76d3cf926da3ed7d89e881d018154bae4994  stable.loongarch64.config
6bf7cdc88e7679d8908b0504561e9ee64bf11ad7d7aa0c7a613cd4f2a2421c32178f8fc714ed1337c5ea027c9d83d6d8a94d54202ec42079fd0019ba02f0d3e0  stable.ppc64le.config
4836d6545691078023ed7390c745cfe2f390865cf2c5f1d8a5bd5d18bfbd2d573d8641f6158028ba4c3d10d55e673e8006a12af3383b7639f157038912ea30d6  stable.riscv64.config
369ae9d4fd143b056d0a56535733148eb53450d75f2c367532506c661191f9fb26fb22075eef65b67b5eae4c3707c6b0d6baebdd725a3494d04c80b9b1a57d1a  stable.s390x.config
7fd91db51c48847c69c716660e50b12f1d4f849249701f3b628b46dd7f3f746af34de6384df43bd8a2482e8e891da976da32f9852fb5036a57af83f4da24890e  stable.x86.config
bfb69386faa8f69cd2240a1e698b58e911704704463ce1227939eb3fc10e8cc916af67a4b25f985d09e86dff9d545f80566d45a03b6d310e97f546e9a464e711  stable.x86_64.config
"
