# Contributor: Borys Zhukov <mp5@mp5.im>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Contributor: omni <omni+alpine@hack.org>
# Maintainer: Celeste <cielesti@protonmail.com>
maintainer="Celeste <cielesti@protonmail.com>"
pkgname=ocaml5
pkgver=5.3.0
pkgrel=1
pkgdesc="Main implementation of the Caml programming language"
url="https://ocaml.org/"
arch="all"
license="LGPL-2.1-or-later WITH OCaml-LGPL-linking-exception"
depends="$pkgname-runtime=$pkgver-r$pkgrel gcc"
makedepends="autoconf"
checkdepends="parallel"
subpackages="
	$pkgname-doc
	$pkgname-ocamldoc
	$pkgname-compiler-libs:_compiler_libs
	$pkgname-runtime
	"
source="https://caml.inria.fr/pub/distrib/ocaml-${pkgver%.*}/ocaml-$pkgver.tar.xz
	loongarch64-native-compiler.patch
	CSE.ml
	arch.ml
	arch.mli
	emit.mlp
	proc.ml
	reload.ml
	scheduling.ml
	selection.ml
	stackframe.ml
	loongarch64.S
	asmgen_loongarch64.S
	"
builddir="$srcdir/ocaml-$pkgver"

case "$CARCH" in
x86_64|aarch64|riscv64|s390x|ppc64le|loongarch64)
	_native_compiler=true
	;;
*)
	_native_compiler=false
	;;
esac

prepare() {
	default_prepare

	autoconf

	case "$CARCH" in
	armhf)
		# fails on the builder
		rm -v testsuite/tests/parallel/domain_parallel_spawn_burn.ml
		;;
	esac

	cd "$srcdir"
	install -Dvm644 \
		CSE.ml arch.ml arch.mli emit.mlp proc.ml \
		reload.ml scheduling.ml selection.ml stackframe.ml \
		-t "$builddir"/asmcomp/loongarch64/

	install -Dvm644 loongarch64.S -t "$builddir"/runtime/
	install -Dvm644 asmgen_loongarch64.S -t "$builddir"/testsuite/tools/
}

build() {
	local make_target extra_conf_opts
	if $_native_compiler; then
		make_target="world.opt"
		extra_conf_opts="
			--enable-native-compiler
			--enable-native-toplevel
			--disable-installing-bytecode-programs
			"
		msg "Building native compiler for $CARCH"
	else
		make_target="world"
		extra_conf_opts="
			--disable-native-compiler
			--disable-native-toplevel
			--enable-installing-bytecode-programs
			"
		msg "Building bytecode compiler for $CARCH"
	fi

	want_check && extra_conf_opts="
		$extra_conf_opts
		--enable-ocamltest
		"

	./configure \
		--prefix=/usr \
		--bindir=/usr/bin \
		--libdir=/usr/lib/ocaml \
		--mandir=/usr/share/man \
		--docdir=/usr/share/doc/$pkgname \
		--disable-installing-source-artifacts \
		$extra_conf_opts \
		CC="${CC:-gcc}"

	case "$CARCH" in
	loongarch64)
		# regenerate .depend to allow parallel build
		MAKEFLAGS='' make coldstart ocamlyacc depend
		;;
	esac

	make $make_target
}

check() {
	make ocamltest
	local i; for i in $(seq 0 5); do
		[ $i -eq 0 ] || msg "Retrying ($i/5)..."
		if [ $i -lt 3 ]; then
			make -C testsuite parallel && return 0
		else
			# If tests don't succeed after 3 retries, assume we
			# don't have enough resources to run them parallelly
			make -C testsuite all && return 0
		fi
		sleep 5
	done
	return 1
}

package() {
	make DESTDIR="$pkgdir" install
}

ocamldoc() {
	pkgdesc="$pkgdesc (documentation generator)"
	depends="$pkgname=$pkgver-r$pkgrel"

	amove usr/bin/ocamldoc*
	amove usr/lib/ocaml/ocamldoc
}

_compiler_libs() {
	pkgdesc="$pkgdesc (compiler libraries)"
	depends="$pkgname=$pkgver-r$pkgrel"
	provides="$pkgname-dev=$pkgver-r$pkgrel"

	amove usr/lib/ocaml/compiler-libs
}

runtime() {
	pkgdesc="$pkgdesc (runtime environment)"
	depends=

	amove usr/bin/ocamlrun*
	amove usr/lib/ocaml/ld.conf

	local i; for i in \
		'*.cmo' \
		'*.cmi' \
		'*.cma' \
		'stublibs' \
		'threads/*.cmi' \
		'threads/*.cma'
	do
		amove "usr/lib/ocaml/$i"
	done
}

sha512sums="
d2f030d4b318d9893895ea7c77df9ae2c74c2875084b755b0d2f7e20a5311f77aa3114c818b7a789573fa0c1a34ff4aee49812f3909149ab17dd681d76c24103  ocaml-5.3.0.tar.xz
063085c4300b525d8fa580b97e5b0707a38a5a77f3db0d6986ba76ea7247526d074eb087f2e778c5ac2e509dae04939dc0a95be37d77e84216f3a0a2b255ed9e  loongarch64-native-compiler.patch
fa0dbc7b0789750e833261c8009934cd6e8874a009e6c7a3c5d5811bbd4282496ca2646a0aeff8e8a319a63eeaed26edb6eb0facb2315243317c6d32b206e01b  CSE.ml
731b7a7546c062d7a806c9143dcf6e52778145e6e0e4a8b54197d986d39c5f91d025275079b98f21abbd493d819e5d0590f629500a627a58e861c36e6e8f225e  arch.ml
2190cce625a5c13331b3893a244c6f31c2811db6dde4f853bbbfa41f06c916f6eb887f380a70e101eb5e39f5a07853bafcf643033b08efb29dc10b3c05e98915  arch.mli
bda23665d7aad213e3a6df0ec982923852479c2f8c16da0d3b688cd4038b1eed4b72d166c38caef84deb3c34ec094a401ee629c5e172d7fdd34cd134587868ec  emit.mlp
826cf89240d023590869b7245d3ba8bab1ade17449a8a388d5d2daf7e41096b992491f95a494b8613895c2e6b65761da9cba241926534668d03ea011f0896f43  proc.ml
b5621046cb0d0b0a6df68799731fafa0e8803e23c3560487fefc1564e66aa935f8436126f6a306123c7007e7203ecc61282c99c2c6569b65e26ff1df8023c6b2  reload.ml
ab3af3af0d8ce9a45d3466382e6065b3b89732238132f818a80c82f2ded7eb6166426b30695dcb156f491185caef708fe22fe272054e64f3afdc547eaf267ef0  scheduling.ml
b7d5545795eccd379568738a277eb35233cec5c58799bc4f17661130dbd5a7988b3ba6269cb647b8683a1882ce59c4937a6f513551758fae166559d8b1528556  selection.ml
719a3d1cad5796704f828e6de77b190aaeb73a7879e40c49b7464bdfb1d05a781d32c3407e6d63fd071cadf7f7ce5613721220b18db491cd8a25f0d3926c73a4  stackframe.ml
9cd755c5a9b865f1705d7dc417e789e8718f6d58d8741c5bab7bee189563784ecf0a34d9c52c908683997966670bd11146cde290770bb0f77ffd1fd5958b7149  loongarch64.S
85e413122adfa0e0cd5a30e200c2cc3fe6b3a15a1e0d38adca7d75a8d48189fed9f47ba4f679a872602c417b7c775e0f476e604f34cd5dc2a76dafd7017a8d49  asmgen_loongarch64.S
"
